#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import logging
logger = logging.getLogger('franck.logger')

from bottle import Bottle, route, response, run
app = Bottle()

import franck.api as api

@app.hook('after_request')
def enable_cors():
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'PUT, GET, POST, DELETE, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token'

@app.route(path="/videos/<url:path>", method="GET")
# curl http://localhost:8080/videos/http://www.jeuxvideo.com/toutes-les-videos/type-7340/machine-40/genre-2050/
def videos(url):
    # TODO: check args

    results = api.videos(url)

    if len(results) == 0:
        video = api.video(url)

        if video:
            results = [video]

    # return a json representation of the video
    results = [video.json for video in results]

    return {'videos': results}

@app.route(path="/video/<url:path>", method="GET")
# curl http://localhost:8080/video/http://www.jeuxvideo.com/videos/gaming-live/433637/rocket-league-du-foot-motorise-a-l-essai-en-split-screen.htm
def video(url):
    # TODO: check args

    result = api.video(url)

    if result:
        return result.json
    else:
        return {}

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--log', dest='loglevel', default='WARNING',
                    help="output log message of this level and up (default: WARNING)",)
    parser.add_argument("--host", dest="host", default="localhost",
                    help="hostname or ip address (default: localhost)")
    parser.add_argument("--port", dest="port", default=8080,
                    help="port number  (default: 8080)")

    args = parser.parse_args()

    # set logger level
    numeric_level = getattr(logging, args.loglevel.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % loglevel)

    logging.basicConfig(level=numeric_level, format='%(asctime)s %(message)s')

    # gogogo
    run(app, host=args.host, port=int(args.port), debug=True)
